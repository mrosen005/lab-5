---
title: "Lab 5: Murder in SQL City"
author: "Miriam Rosen"
format: html
editor: source
embed-resources: true
code-tools: true
self-contained: true
code-fold: true
message: false
warning: false
execute:
  echo: true
  error: true 
---

For this lab, you will be joining and filtering related datasets to solve a murder mystery!

## Instructions

Northwestern University's Knight Lab wanted to help sharpen users' database skills, so they created a murder mystery. Can you solve this crime in SQL City??

The relational data you will be working with contains tables with different pieces of information pertinent to the crime - people, social media check-ins, driver's licenses, crime scene reports, police interviews, and more!

![Database schema](https://mystery.knightlab.com/schema.png)

Solve the murder mystery, showing **all of your work in this document**. Your document and code must be well organized, easy to follow, and reproducible.

+ Use headers and written descriptions to indicate what you are doing.
+ Use `dplyr` verbs and `join` functions rather than just looking through the tables manually.
+ Use good code formatting practices.
+ Comment your code.
+ Cite any external sources you use to solve the mystery.

### Tips 

You may find the `pull()` function handy for displaying each clue as you go along.


## Access the Data

This code chunk will read in all of the tables of data for you. Don't modify or remove this!

```{r}
#| message: false
#| warning: false
#| label: read-in-data

library(tidyverse)

# If purrr is not detected, install the package
if (!"purrr" %in% installed.packages()) install.packages("purrr")

source("https://raw.githubusercontent.com/atheobold/groupworthy-data-science/main/labs/instructions/lab-5-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police departmentâ€™s database and follow the clues to find the person responsible for the murder?!

In this step, I am filtering through the crime_scene_report data set based on the clues provided from Detective Wickham to narrow down the data set to get the description of the crime.  


```{r}
#| label: inspecting-crime-scene-report

crime_scene_report |> 
  mutate(date = ymd(date)) |> 
  filter(date == ymd("2018-01-15"), 
         type == "murder",
         city == "SQL City"
         )



```

### Finding Witnesses

Now that I narrowed the crimes_scene_report data set down to the correct crime case and have the description data which provides information regarding where the witnesses live, I am using the person data set to narrow down and find the first witness list. 


```{r}
#| label: finding-witness-1




witnesses <- bind_rows(person |> 
  filter(address_street_name == "Northwestern Dr") |> 
  slice_max(order_by = address_number,
            n = 1
            ), 
  person |> 
  mutate(is_annabel = str_detect(name,
                                 "^Annabel"
                                 )
         ) |>
  filter(address_street_name == "Franklin Ave",
         is_annabel
          )
  )



```

Reflection: Firstly, to find the witness who lives at the last house on Northwestern Dr., I originally used the arrange() function with the slice_max() function since I needed to find the last house on the street, and therefore the largest address number. I realized using the arrange() function is an unnecessary step and took this function out since the slice_max() function arranges the data within this function. Secondly, I used the mutate() function to create a new column which detects the strings beginning with Annabel. I used the ^ symbol before Annabel in my code to specify that Annabel needs to happen at the beginning of the person's name. This is important because someone could potentially have the last name Annabel, but we are only looking for people with the first name Annabel. I also used the bind_rows() function which adds rows of data frames together with the same columns into one data frame. This is beneficial because it allowed me to obtain the interviews of both witnesses in one data frame, making my code more efficient. 

### Examining Witness Interviews

Now that I have the witnesses ID's, I am using this to filter from the interview data set to get their transcripts which provides further clues as to who the murderer is.  

```{r}
#| label: examining-witness-interviews


interview |> 
    semi_join(witnesses, 
            by = c("person_id" = "id")
            )

```
Reflection: Originally, I hard coded the person_id number. To make my code more flexible, I saved the narrowed-down witness results in a data frame. Then, I used the semi_join() function to combine this data frame with the interview data to access the witness's statements. 

### Using Witness's Clues

In this step, I am using the clues from the witness testimonies to narrow down to the suspected individual. 


```{r}
#| label: using-witness-clues

# I heard a gunshot and then saw a man run out. He had a "Get Fit Now Gym" bag. The membership number on the bag started with "48Z". Only gold members have those bags. The man got into a car with a plate that included "H42W".

# I saw the murder happen, and I recognized the killer from my gym when I was working out last week on January the 9th.

  
potential_suspect <- get_fit_now_member |> 
  filter(membership_status == "gold",
         str_detect(id,
                   "^48Z"
                   )
         ) |>
  inner_join(get_fit_now_check_in,
             by = c("id" = "membership_id"
                     )
              ) |>
  mutate(check_in_date = ymd(check_in_date)) |>
  filter(check_in_date == ymd("2018-01-09")) |>  
  inner_join(person, 
            by = c("person_id" = "id"
                   ) 
         ) |> 
  inner_join(drivers_license,
            by = c("license_id" = "id"
                   )
            ) |>
  filter(str_detect(plate_number,
                      "H42W"
                  )
          )


  

```
Revision: I added a ^ to the string with 48Z to specify to narrow down membership_id's with 48Z at the beginning of the ID because the witness said they saw the suspect with a "Get Fit Now Gym" bag membership ID that began with 48Z. This is important because someone could have a membership ID that contains 48Z in it, but not at the beginning and since we know that the suspect's membership ID begins with 48Z, not specifying this could lead us to the wrong suspect. 

### Examining Suspect's Interview

In this step, I am checking the suspected individual's interview. From the interview, I gathered that Jeremy Bowers was the hit man. 

```{r}
#| label: examining-suspect's-interview

interview |> 
  semi_join(potential_suspect, 
            by = join_by(person_id)
            )
```
Reflection: Originally, I hard coded the person_id number. To make my code more flexible, I saved my initial suspect results in a data frame. Then, I used the semi_join() function to combine this data frame with the interview data to access the suspect's statements.

 
### Finding Person Responsible

In this step, I am using Jeremy's clue from his interview to figure out who hired him for the murder 


```{r}
#| label: finding-person-responsible

# I was hired by a woman with a lot of money. I don't know her name but I know she's around 5'5" (65") or 5'7" (67"). She has red hair and she drives a Tesla Model S. I know that she attended the SQL Symphony Concert 3 times in December 2017.


suspect <- person |>
  inner_join(drivers_license,
             join_by(license_id == id)) |>
  inner_join(facebook_event_checkin,
             join_by(id == person_id)) |>
  filter(height %in% c("65":"66",
                        "67"
                        ),
         hair_color == "red",
         car_make == "Tesla", 
         car_model == "Model S", 
         gender == "female",
         event_name == "SQL Symphony Concert",
         month(ymd(date)) == 12,
         year(ymd(date)) == 2017
         ) |>
print()



```
Reflection: Originally, I joined my data frames incorrectly, not using the correct joining variable. In my revision, I joined my data frames first and then filtered based on the clues provided by the hit man. I realized I need to make sure I am joining by the keys so that my joined data frame does not repeat variables. 

**Follow the evidence to the person responsible for the murder, building a report as you go.**
Hint: Make sure you check for interviews with any suspects!

```{r}

interview |> 
  semi_join(suspect,
            by = c("person_id" = "id")
            ) 

```
Reflection: I did not originally think to check Miranda's interview to make sure she wasn't hired by someone. I used a semi_join() to join the interview data frame and suspect data frame and then filtered for the ID I got from the hit man's interview to get the suspect's interview. Since there was no interview, I concluded this was the final suspect. 


## And the final suspect is...

*Put the name of the person responsible for the murder here:* Miranda Priestly
